name: Test and Release Workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:

  TF_VERSION: "1.12.2"
  TG_VERSION: "0.66.9"

jobs:
  validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup Terragrunt
      run: |
        wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
        chmod +x terragrunt
        sudo mv terragrunt /usr/local/bin/

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Install Checkov
      run: pip install checkov

    - name: Run Checkov Security Scan
      run: |
        checkov -d . \
          --framework terraform \
          --output cli \
          --quiet \
          --compact || true

  lint:
    name: Terraform Lint
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: latest

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint --recursive || true

  test-examples:
    name: Test Example Configurations
    runs-on: ubuntu-latest
    needs: [validate, security-scan, lint]
    strategy:
      matrix:
        example: 
          - "development-environment"
          - "enterprise-multi-region"
          - "production-landing-zone"
          - "simple-startup"
          

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup Terragrunt
      run: |
        wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TG_VERSION }}/terragrunt_linux_amd64
        chmod +x terragrunt
        sudo mv terragrunt /usr/local/bin/

    - name: Test Example Configuration - ${{ matrix.example }}
      run: |
        # Create test directory for this example
        mkdir -p test-${{ matrix.example }}
        cd test-${{ matrix.example }}
        
        # Create simplified terragrunt.hcl for testing
        case "${{ matrix.example }}" in
          "simple-startup")
            cat > terragrunt.hcl << 'EOF'
        terraform {
          source = "../."
        }
        
        inputs = {
          region           = "us-east-1"
          backup_region    = "us-west-2"
          governed_regions = ["us-east-1"]
          
          email_local_part = "aws"
          email_domain     = "startup.com"
          
          org_accounts = {
            workloads = {
              prod = ["production"]
              staging = ["staging"]
              dev = ["development"]
            }
            common_services = []
          }
          
          tags = {
            "Owner"          = "CCL Consulting"
            "Provisioned by" = "Terraform"
            "Environment"    = "Startup"
            "CostCenter"     = "Engineering"
            "Contact"        = "devops@startup.com"
          }
        }
        EOF
            ;;
          "development-environment")
            cat > terragrunt.hcl << 'EOF'
        terraform {
          source = "../."
        }
        
        inputs = {
          region           = "us-east-1"
          backup_region    = "us-west-2"
          governed_regions = ["us-east-1", "us-west-2"]
          
          email_local_part = "aws-dev"
          email_domain     = "ccl-consulting.com"
          
          org_accounts = {
            workloads = {
              prod = []
              staging = ["staging-integration", "staging-performance"]
              dev = ["dev-frontend", "dev-backend", "dev-sandbox"]
            }
            common_services = ["shared-dev-tools", "shared-dev-monitoring"]
          }
          
          tags = {
            "Owner"          = "CCL Consulting"
            "Provisioned by" = "Terraform"
            "Environment"    = "development"
            "CostCenter"     = "Engineering"
            "Contact"        = "devops@ccl-consulting.com"
          }
        }
        EOF
            ;;
          "production-landing-zone")
            cat > terragrunt.hcl << 'EOF'
        terraform {
          source = "../."
        }
        
        inputs = {
          region           = "us-east-1"
          backup_region    = "us-west-2"
          governed_regions = ["us-east-1", "us-west-2", "eu-west-1"]
          
          email_local_part = "aws-prod"
          email_domain     = "ccl-consulting.com"
          
          org_accounts = {
            workloads = {
              prod = ["prod-web", "prod-api", "prod-data"]
              staging = ["staging-web", "staging-api"]
              dev = ["dev-integration"]
            }
            common_services = ["shared-logging", "shared-monitoring", "shared-security"]
          }
          
          tags = {
            "Owner"          = "CCL Consulting"
            "Provisioned by" = "Terraform"
            "Environment"    = "production"
            "CostCenter"     = "Production"
            "Contact"        = "ops@ccl-consulting.com"
          }
        }
        EOF
            ;;
          "enterprise-multi-region")
            cat > terragrunt.hcl << 'EOF'
        terraform {
          source = "../."
        }
        
        inputs = {
          region           = "us-east-1"
          backup_region    = "us-west-2"
          governed_regions = ["us-east-1", "us-west-2", "eu-west-1", "ap-southeast-1"]
          
          email_local_part = "aws-enterprise"
          email_domain     = "ccl-consulting.com"
          
          org_accounts = {
            workloads = {
              prod = ["prod-us-web", "prod-eu-web", "prod-asia-web"]
              staging = ["staging-us", "staging-eu"]
              dev = ["dev-us", "dev-eu"]
            }
            common_services = ["shared-dns", "shared-logging", "shared-monitoring", "shared-security"]
          }
          
          tags = {
            "Owner"          = "CCL Consulting"
            "Provisioned by" = "Terraform"
            "Environment"    = "enterprise"
            "CostCenter"     = "Enterprise"
            "Contact"        = "enterprise@ccl-consulting.com"
          }
        }
        EOF
            ;;
        esac
        
        echo "Validating example: ${{ matrix.example }}"
        echo "Generated terragrunt.hcl:"
        cat terragrunt.hcl
        
        # Initialize and validate (without planning due to missing AWS credentials)
        terragrunt init --terragrunt-non-interactive
        terragrunt validate --terragrunt-non-interactive
        
        echo "Example ${{ matrix.example }} validation completed successfully"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [validate, security-scan, lint, test-examples]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Generate Release Notes
      run: |
        echo "## What's New" > release-notes.md
        echo "" >> release-notes.md
        echo "This release includes:" >> release-notes.md
        echo "- Validated Terraform configurations" >> release-notes.md
        echo "- Security scan passed" >> release-notes.md
        echo "- Linting completed" >> release-notes.md
        echo "- Example configurations tested" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Compatibility" >> release-notes.md
        echo "- **Terraform**: >= ${{ env.TF_VERSION }}" >> release-notes.md
        echo "- **Terragrunt**: >= ${{ env.TG_VERSION }}" >> release-notes.md
        echo "- **AWS Provider**: >= 4.16" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Installation" >> release-notes.md
        echo '```hcl' >> release-notes.md
        echo 'terraform {' >> release-notes.md
        echo '  source = "git::https://github.com/${{ github.repository }}.git///?ref=${{ github.event.release.tag_name }}"' >> release-notes.md
        echo '}' >> release-notes.md
        echo '```' >> release-notes.md

    - name: Update Release
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
          
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: releaseNotes
          });

  notify:
    name: Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [validate, security-scan, lint, test-examples]
    
    steps:
    - name: Workflow Summary
      run: |
        echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Validation | ${{ needs.validate.result == 'success' && 'Passed' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && 'Passed' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Linting | ${{ needs.lint.result == 'success' && 'Passed' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Example Tests | ${{ needs.test-examples.result == 'success' && 'Passed' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
